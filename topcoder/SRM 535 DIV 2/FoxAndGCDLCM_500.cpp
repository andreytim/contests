#include <vector>
#include <list>
#include <map>
#include <set>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;

class FoxAndGCDLCM {
public:
	long long get(long long, long long);
};

long long gcd(long long a, long long b) { return b == 0 ? a : gcd (b, a%b); }

long long FoxAndGCDLCM::get(long long G, long long L) {
	if (L%G != 0) {
		return -1;
	}
	long long res = L + G;
	for (long long i = 1; i*i*G <= L; i++) {
		if (L%i == 0 && gcd(L/i, G*i) == G) {
			res = min(res, L/i + G*i);
		}
	}
	return res;
}

// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, long long p0, long long p1, bool hasAnswer, long long p2) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1;
	cout << "]" << endl;
	FoxAndGCDLCM *obj;
	long long answer;
	obj = new FoxAndGCDLCM();
	clock_t startTime = clock();
	answer = obj->get(p0, p1);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p2 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p2;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	long long p0;
	long long p1;
	long long p2;
	
	{
	// ----- test 0 -----
	p0 = 2ll;
	p1 = 20ll;
	p2 = 14ll;
	all_right = KawigiEdit_RunTest(0, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 5ll;
	p1 = 8ll;
	p2 = -1ll;
	all_right = KawigiEdit_RunTest(1, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 1000ll;
	p1 = 100ll;
	p2 = -1ll;
	all_right = KawigiEdit_RunTest(2, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 100ll;
	p1 = 1000ll;
	p2 = 700ll;
	all_right = KawigiEdit_RunTest(3, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 10ll;
	p1 = 950863963000ll;
	p2 = 6298430ll;
	all_right = KawigiEdit_RunTest(4, p0, p1, true, p2) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	getchar();
	return 0;
}
// PROBLEM STATEMENT
// Fox Jiro and Eel Saburo are good friends. One day Saburo found two interesting positive integers: A and B.
// 
// On the next day, Saburo met Jiro and wanted to tell him the two integers. However, he managed to forget their values. All Saburo could remember was their greatest common divisor G and their least common multiple L.
// 
// You are given two long longs: G and L. Find the original integers A and B, and return the value of A+B. If there are multiple pairs of A and B that correspond to G and L, pick the one that minimizes A+B. If it is impossible to find such A and B (i.e., Saburo made a mistake somewhere), return -1.
// 
// DEFINITION
// Class:FoxAndGCDLCM
// Method:get
// Parameters:long long, long long
// Returns:long long
// Method signature:long long get(long long G, long long L)
// 
// 
// NOTES
// -The greatest common divisor of two integers a and b is the largest positive integer that divides both a and b without any remainder.
// -The least common multiple of two integers a and b is the smallest positive integer that is a multiple of both a and b.
// 
// 
// CONSTRAINTS
// -G will be between 1 and 1,000,000,000,000 (10^12), inclusive.
// -L will be between 1 and 1,000,000,000,000 (10^12), inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 2
// 20
// 
// Returns: 14
// 
// The possible pairs of A and B are {2, 20} and {4, 10}. We need to pick {4, 10} since 4+10 is the smallest sum of A and B.
// 
// 1)
// 5
// 8
// 
// Returns: -1
// 
// There are no pairs of A and B such that their greatest common divisor is 5 and their least common multiple is 8.
// 
// 2)
// 1000
// 100
// 
// Returns: -1
// 
// 
// 
// 3)
// 100
// 1000
// 
// Returns: 700
// 
// 
// 
// 4)
// 10
// 950863963000
// 
// Returns: 6298430
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by [KawigiEdit] 2.0!
