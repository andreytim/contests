#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>

using namespace std;


class FoxAndSorting {
public:
	long long get(long long idx) {
		
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, long long p0, bool hasAnswer, long long p1) {
	cout << "Test " << testNum << ": [" << p0;
	cout << "]" << endl;
	FoxAndSorting *obj;
	long long answer;
	obj = new FoxAndSorting();
	clock_t startTime = clock();
	answer = obj->get(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;
	
	long long p0;
	long long p1;
	
	{
	// ----- test 0 -----
	p0 = 10ll;
	p1 = 100000000ll;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 1 -----
	p0 = 1000000000000000000ll;
	p1 = 999999999999999999ll;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 2 -----
	p0 = 58ll;
	p1 = 100000000100ll;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 3 -----
	p0 = 314159265358979ll;
	p1 = 646003042230121105ll;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}
	
	{
	// ----- test 4 -----
	p0 = 271828182845904523ll;
	p1 = 132558071125756493ll;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}
	
	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Fox Jiro and Eel Saburo are good friends. Saburo uses a strange way to compare integers. Please help Jiro understand it.
// 
// For a positive integer n, let d(n) be the sum of its digits in base 10. For example, d(407) = 4+0+7 = 11.
// 
// When comparing two different integers x and y, Saburo first compares their sums of digits, i.e., the values d(x) and d(y). If they differ, the one with the smaller sum is smaller.
// For example, for Saburo 50 is smaller than 16, because d(50) < d(16).
// 
// If the numbers have the same sum of digits, Saburo compares them lexicographically (i.e., as strings).
// For example, for Saburo the number 111 is smaller than the number 3, because d(111) = d(3) and "111" < "3".
// Also, the number 470 is smaller than 4700, because "470" < "4700".
// 
// Let A be the sequence of integers {0, 1, ..., 999999999999999998, 999999999999999999 (10^18 - 1)}.
// Let B be the sequence A, ordered according to Saburo's rules.
// You are given a long long idx, representing a 1-based index into B.
// Return the corresponding element of B.
// 
// DEFINITION
// Class:FoxAndSorting
// Method:get
// Parameters:long long
// Returns:long long
// Method signature:long long get(long long idx)
// 
// 
// NOTES
// -Given two distinct strings A and B, we say that A is lexicographically smaller than B if either A is a prefix of B, or A has a smaller character than B on the first position on which they differ.
// 
// 
// CONSTRAINTS
// -idx will be between 1 and 1,000,000,000,000,000,000 (10^18), inclusive.
// 
// 
// EXAMPLES
// 
// 0)
// 10
// 
// Returns: 100000000
// 
// First 10 elements of B are: {0, 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000}.
// 
// 1)
// 1000000000000000000
// 
// Returns: 999999999999999999
// 
// The last element.
// 
// 2)
// 58
// 
// Returns: 100000000100
// 
// 
// 
// 3)
// 314159265358979
// 
// Returns: 646003042230121105
// 
// 
// 
// 4)
// 271828182845904523
// 
// Returns: 132558071125756493
// 
// 
// 
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
